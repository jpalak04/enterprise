image: node:18

cache:
  paths:
    - node_modules/

variables:
  ART_URL: "https://artifactory-phx.ecd.axway.int/artifactory"
  SSP_APP_VERSION: "ce-developer-portal-0.1.0"
  HELM_REPO_BRANCHES: "cesharedservices-helm-snapshot"
  HELM_REPO_RELEASES: "cesharedservices-helm-release"
  DOCKER_REGISTRY_BRANCHES: "cesharedservices-docker-snapshot-phx.artifactory-phx.ecd.axway.int"
  DOCKER_REGISTRY_RELEASES: "cesharedservices-docker-release-phx.artifactory-phx.ecd.axway.int"
  TW_IMG_NM: "twistlock-image"
  DIND_TAG: "24.0.5-dind" 
  LATEST_TAG_CMD: "git describe --tags --abbrev=0 2> /dev/null || echo \"0.0.1\""


include:
 - local: '.gitlab-ci-blackduck.yml'
 - local: '.gitlab-ci-fortify.yml'
 - local: '.gitlab-ci-twistlock.yml'
#  - project: "scurity/gitlabci"
#    file:
#      - "/.gitlab-ci-fortify.yml"
#      - "/.gitlab-ci-iriusrisk.yml"
#      - "/.gitlab-ci-blackduck.yml"
#      - "/.gitlab-ci-csr.yml"
#      - "/.gitlab-ci-twistlock.yml"
#      - "/.gitlab-ci-appspider.yml"
#    ref: master
#  - project: "cloud/gitlabci"
#    file:
#      - "/docker.gitlab-ci.yml"
#      - "/helm.gitlab-ci.yml"
#      - "/metadata.gitlab-ci.yml"
#    ref: 2.0.0
#  - project: "apigov/gitlabci"
#    file:
#      - "/.gitlab-ci-sonar.yml"
#    ref: master
#  - local: '.gitlab-ci-test.yml'
#
#Application ID: 10863
#Analysis Upload Token: e82663ac-005e-43ce-84e2-05692f747645
#CloudScan Control Token: 951b0efd-f136-4d36-9a06-0e37b57cc69e

dump_variables:
  script:
    - 'echo "CI_COMMIT_BRANCH: $CI_COMMIT_BRANCH"'
    - 'echo "CI_DEFAULT_BRANCH: $CI_DEFAULT_BRANCH"'
    - 'echo "RUN_CSR: $RUN_CSR"'
    - 'echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"'
    - 'echo "LAST_TAG_VERSION: $LAST_TAG_VERSION"'
    - 'echo "CSR_REPORT_KEY: $CSR_REPORT_KEY"'
    - 'echo "AXWAY_ROOT_CA: $AXWAY_ROOT_CA"'
    - 'echo "BLACKDUCK_URL: $BLACKDUCK_URL"'
    - 'echo "BLACKDUCK_API_TOKEN: $BLACKDUCK_API_TOKEN"'
    - 'echo "BLACKDUCK_PROJECT_NAME: $BLACKDUCK_PROJECT_NAME"'
    - 'echo "FORTIFY_MAVEN_BUILD: $FORTIFY_MAVEN_BUILD"'
    - 'echo "MAVEN_SETTINGS_FILE_URL: $MAVEN_SETTINGS_FILE_URL"'
    - 'echo "CI_PROJECT_DIR: $CI_PROJECT_DIR"'
    - 'echo "GIT_SSL_NO_VERIFY: $GIT_SSL_NO_VERIFY"'
    - 'echo "JAVA_HOME (might be set based on JAVA_HOME_CMD): $JAVA_HOME"'

# Include any additional rules or stages as needed
default:
  tags:
    - devops-portal
    - cloud-mgmt-plane

stages:
  - install
  - compile
  - build
  - test
  - push
  - security-scans # Run Security Scans before security review. Jobs will only fail if the scan has not completed successfully. Security Issues will be audited later in Security Review Stage
  - charts
#  - security-review # Uses artifacts from security-scans stage to perform Continuous Security Review
#  - release

install:
  stage: install
  script:
    - yarn install --frozen-lockfile
  except:
    - main
    - devo-app-config
#    - twistlock-gate
  

typescript_compile:
  stage: compile
  script:
    - yarn tsc
  artifacts:
    paths:
      - dist-types/
  except:
    - main
    - devo-app-config
#    - twistlock-gate


backend_build:
  stage: build
  script:
    - yarn build:backend --config ../../app-config.yaml --config ../../app-config.docker.yaml
  artifacts:
    paths:
      - packages/backend/dist/
  except:
    - main
    - devo-app-config
#    - twistlock-gate

validate_docker_access:
  image: docker:latest
  services:
    - name: docker:dind
      command:
        - /bin/sh
        - -c
        - |
          export DOCKER_TLS_CERTDIR="" &&
          dockerd-entrypoint.sh --host=tcp://0.0.0.0:2375 --insecure-registry=$DOCKER_REGISTRY_BRANCHES --insecure-registry=$DOCKER_REGISTRY_RELEASES || exit
      
  script:
    - echo "Pinging Docker host..."
    - ping -c 4 docker || true
    - echo "Checking port 2375 accessibility..."
    - apk add --no-cache netcat-openbsd || true
    - nc -zv docker 2375 || true
    - echo "Attempting to connect to Docker daemon..."
    - export DOCKER_HOST=tcp://docker:2375
    - docker version || true
  except:
    - devo-app-config


docker_build-push:
  stage: push
  image: docker:latest
  services:
    - name: docker:dind
      command:
        - /bin/sh
        - -c
        - dockerd-entrypoint.sh --insecure-registry=$DOCKER_REGISTRY_BRANCHES --insecure-registry=$DOCKER_REGISTRY_RELEASES || exit
    
  script:
    - docker build -t $DOCKER_REGISTRY_BRANCHES/$CI_PROJECT_NAME:$LATEST_TAG-$CI_COMMIT_REF_NAME .
    - echo "$ART_PWD" | docker login -u "$ART_USER" --password-stdin $DOCKER_REGISTRY_BRANCHES
    - echo "pushing $DOCKER_REGISTRY_BRANCHES/$CI_PROJECT_NAME:$LATEST_TAG-$CI_COMMIT_REF_NAME"
    - docker tag $DOCKER_REGISTRY_BRANCHES/$CI_PROJECT_NAME:$LATEST_TAG-$CI_COMMIT_REF_NAME $TW_IMG_NM
    - echo "tagging $DOCKER_REGISTRY_BRANCHES/$CI_PROJECT_NAME:$LATEST_TAG-$CI_COMMIT_REF_NAME $TW_IMG_NM"
    - docker save $TW_IMG_NM > $TW_IMG_NM.tar
    - docker push $DOCKER_REGISTRY_BRANCHES/$CI_PROJECT_NAME:$LATEST_TAG-$CI_COMMIT_REF_NAME
  before_script:
    - apk add --no-cache git
    - export LATEST_TAG=$(eval ${LATEST_TAG_CMD})
  except:
    - tags
    - main
    - schedules
    - devo-app-config
  cache:
    key: ${CI_PIPELINE_ID}
    paths:
      - ${TW_IMG_NM}.tar



docker_build-push-release:
  stage: push
  image: docker:latest
  services:
    - name: docker:dind
      command:
        - /bin/sh
        - -c
        - dockerd-entrypoint.sh --insecure-registry=$DOCKER_REGISTRY_BRANCHES --insecure-registry=$DOCKER_REGISTRY_RELEASES || exit
  script:
    - docker build -t $DOCKER_REGISTRY_RELEASES/$CI_PROJECT_NAME:$CI_COMMIT_TAG .
    - echo "$ART_PWD" | docker login -u "$ART_USER" --password-stdin $DOCKER_REGISTRY_RELEASES
    - echo "pushing $DOCKER_REGISTRY_RELEASES/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
    - docker push $DOCKER_REGISTRY_RELEASES/$CI_PROJECT_NAME:$CI_COMMIT_TAG
  only:
    - tags
  except:
    - schedules
    - devo-app-config
#    - twistlock-gate


package_and_push:
  stage: charts
  image: docker:latest
  script:
    - CHART_VERSION=$(grep 'version:' ./charts/developer-portal/Chart.yaml | awk '{print $2}')-$CI_COMMIT_REF_NAME
    - helm package ./charts/developer-portal --version $CHART_VERSION
    - ls -ltr
    - export JFROG_CLI_SKIP_TLS_VERIFY=true
    - ./jfrog rt upload ce-developer-portal-$CHART_VERSION.tgz $HELM_REPO_BRANCHES
  except:
    - tags
    - main
    - schedules
    - devo-app-config
#    - twistlock-gate

  before_script:
    # Install JFrog CLI
    - apk add --update --no-cache curl bash openssl ca-certificates
    - curl -fL https://getcli.jfrog.io | sh
  
    # Install Helm CLI
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
    - echo -n | openssl s_client -connect artifactory-phx.ecd.axway.int:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /usr/local/share/ca-certificates/artifactory.crt
    - update-ca-certificates
  
    # Configure JFrog CLI
    - ./jfrog config add --artifactory-url=$ART_URL --user=$ART_USER --password=$ART_PWD --interactive=false


package_and_push-release:
  stage: charts
  image: docker:latest
  script:
    - CHART_VERSION=$(grep 'version:' ./charts/developer-portal/Chart.yaml | awk '{print $2}')-$CI_COMMIT_TAG
    - helm package ./charts/developer-portal --version $CHART_VERSION
    - ls -ltr
    - export JFROG_CLI_SKIP_TLS_VERIFY=true
    - ./jfrog rt upload ce-developer-portal-$CHART_VERSION.tgz $HELM_REPO_RELEASES
  only:
    - tags
  except:
    - schedules
    - devo-app-config
#    - twistlock-gate

  before_script:
    # Install JFrog CLI
    - apk add --update --no-cache curl bash openssl ca-certificates
    - curl -fL https://getcli.jfrog.io | sh
  
    # Install Helm CLI
    - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    - chmod 700 get_helm.sh
    - ./get_helm.sh
    - echo -n | openssl s_client -connect artifactory-phx.ecd.axway.int:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /usr/local/share/ca-certificates/artifactory.crt
    - update-ca-certificates
  
    # Configure JFrog CLI
    - ./jfrog config add --artifactory-url=$ART_URL --user=$ART_USER --password=$ART_PWD --interactive=false